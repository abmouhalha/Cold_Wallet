from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import base64
import os

def decrypt_private_key(file_path, decryption_key):
    try:
        with open(file_path, 'rb') as f:
            nonce, tag, ciphertext = [f.read(x) for x in (16, 16, -1)]
        
        # Déchiffrement de la clé privée
        cipher = AES.new(decryption_key, AES.MODE_EAX, nonce=nonce)
        decrypted_private_key = cipher.decrypt_and_verify(ciphertext, tag)
        
        return decrypted_private_key.decode('utf-8')
    except Exception as e:
        print(f"Erreur lors du déchiffrement de la clé privée : {e}")
        return None


def read_private_key():
    key_file_path = input("Entrez le chemin du fichier contenant la clé privée : ")

    if not os.path.exists(key_file_path):
        print(f"Erreur : Le fichier {key_file_path} n'existe pas.")
        return

    # Si la clé est chiffrée, l'utilisateur peut entrer une clé de déchiffrement
    is_encrypted = input("La clé est-elle chiffrée ? (oui/non) : ").strip().lower() == 'oui'
    
    if is_encrypted:
        decryption_key = input("Entrez la clé de déchiffrement : ").encode('utf-8')
        private_key = decrypt_private_key(key_file_path, decryption_key)
        if private_key:
            print(f"Clé privée déchiffrée : {private_key}")
    else:
        try:
            with open(key_file_path, 'r') as file:
                private_key = file.read().strip()
                print(f"Clé privée lue : {private_key}")
        except Exception as e:
            print(f"Erreur lors de la lecture de la clé privée : {e}")
